// Code generated by "enumer -type=DayOfSeason -json -text -yaml -sql"; DO NOT EDIT.

//
package dsos

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _DayOfSeasonName = "D01D02D03D04D05D06D07D08D09D10D11D12D13D14D15D16D17D18D19D20D21D22D23D24D25D26D27D28D29D30D31D32D33D34D35D36D37D38D39D40D41D42D43D44D45D46D47D48D49D50D51D52D53D54D55D56D57D58D59D60D61D62D63D64D65D66D67D68D69D70"

var _DayOfSeasonIndex = [...]uint8{0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 210}

func (i DayOfSeason) String() string {
	i -= 1
	if i < 0 || i >= DayOfSeason(len(_DayOfSeasonIndex)-1) {
		return fmt.Sprintf("DayOfSeason(%d)", i+1)
	}
	return _DayOfSeasonName[_DayOfSeasonIndex[i]:_DayOfSeasonIndex[i+1]]
}

var _DayOfSeasonValues = []DayOfSeason{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70}

var _DayOfSeasonNameToValueMap = map[string]DayOfSeason{
	_DayOfSeasonName[0:3]:     1,
	_DayOfSeasonName[3:6]:     2,
	_DayOfSeasonName[6:9]:     3,
	_DayOfSeasonName[9:12]:    4,
	_DayOfSeasonName[12:15]:   5,
	_DayOfSeasonName[15:18]:   6,
	_DayOfSeasonName[18:21]:   7,
	_DayOfSeasonName[21:24]:   8,
	_DayOfSeasonName[24:27]:   9,
	_DayOfSeasonName[27:30]:   10,
	_DayOfSeasonName[30:33]:   11,
	_DayOfSeasonName[33:36]:   12,
	_DayOfSeasonName[36:39]:   13,
	_DayOfSeasonName[39:42]:   14,
	_DayOfSeasonName[42:45]:   15,
	_DayOfSeasonName[45:48]:   16,
	_DayOfSeasonName[48:51]:   17,
	_DayOfSeasonName[51:54]:   18,
	_DayOfSeasonName[54:57]:   19,
	_DayOfSeasonName[57:60]:   20,
	_DayOfSeasonName[60:63]:   21,
	_DayOfSeasonName[63:66]:   22,
	_DayOfSeasonName[66:69]:   23,
	_DayOfSeasonName[69:72]:   24,
	_DayOfSeasonName[72:75]:   25,
	_DayOfSeasonName[75:78]:   26,
	_DayOfSeasonName[78:81]:   27,
	_DayOfSeasonName[81:84]:   28,
	_DayOfSeasonName[84:87]:   29,
	_DayOfSeasonName[87:90]:   30,
	_DayOfSeasonName[90:93]:   31,
	_DayOfSeasonName[93:96]:   32,
	_DayOfSeasonName[96:99]:   33,
	_DayOfSeasonName[99:102]:  34,
	_DayOfSeasonName[102:105]: 35,
	_DayOfSeasonName[105:108]: 36,
	_DayOfSeasonName[108:111]: 37,
	_DayOfSeasonName[111:114]: 38,
	_DayOfSeasonName[114:117]: 39,
	_DayOfSeasonName[117:120]: 40,
	_DayOfSeasonName[120:123]: 41,
	_DayOfSeasonName[123:126]: 42,
	_DayOfSeasonName[126:129]: 43,
	_DayOfSeasonName[129:132]: 44,
	_DayOfSeasonName[132:135]: 45,
	_DayOfSeasonName[135:138]: 46,
	_DayOfSeasonName[138:141]: 47,
	_DayOfSeasonName[141:144]: 48,
	_DayOfSeasonName[144:147]: 49,
	_DayOfSeasonName[147:150]: 50,
	_DayOfSeasonName[150:153]: 51,
	_DayOfSeasonName[153:156]: 52,
	_DayOfSeasonName[156:159]: 53,
	_DayOfSeasonName[159:162]: 54,
	_DayOfSeasonName[162:165]: 55,
	_DayOfSeasonName[165:168]: 56,
	_DayOfSeasonName[168:171]: 57,
	_DayOfSeasonName[171:174]: 58,
	_DayOfSeasonName[174:177]: 59,
	_DayOfSeasonName[177:180]: 60,
	_DayOfSeasonName[180:183]: 61,
	_DayOfSeasonName[183:186]: 62,
	_DayOfSeasonName[186:189]: 63,
	_DayOfSeasonName[189:192]: 64,
	_DayOfSeasonName[192:195]: 65,
	_DayOfSeasonName[195:198]: 66,
	_DayOfSeasonName[198:201]: 67,
	_DayOfSeasonName[201:204]: 68,
	_DayOfSeasonName[204:207]: 69,
	_DayOfSeasonName[207:210]: 70,
}

// DayOfSeasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DayOfSeasonString(s string) (DayOfSeason, error) {
	if val, ok := _DayOfSeasonNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DayOfSeason values", s)
}

// DayOfSeasonValues returns all values of the enum
func DayOfSeasonValues() []DayOfSeason {
	return _DayOfSeasonValues
}

// IsADayOfSeason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DayOfSeason) IsADayOfSeason() bool {
	for _, v := range _DayOfSeasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DayOfSeason
func (i DayOfSeason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DayOfSeason
func (i *DayOfSeason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DayOfSeason should be a string, got %s", data)
	}

	var err error
	*i, err = DayOfSeasonString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for DayOfSeason
func (i DayOfSeason) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DayOfSeason
func (i *DayOfSeason) UnmarshalText(text []byte) error {
	var err error
	*i, err = DayOfSeasonString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for DayOfSeason
func (i DayOfSeason) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DayOfSeason
func (i *DayOfSeason) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DayOfSeasonString(s)
	return err
}

func (i DayOfSeason) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DayOfSeason) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := DayOfSeasonString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
