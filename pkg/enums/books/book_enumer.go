// Code generated by "enumer -type=Book -json -text -yaml -sql"; DO NOT EDIT.

//
package books

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _BookName = "EothinaEuchologionHeirmologionHorologionKatavasiasLectionarydMenaionOctochechosOtherPentecostarionPsalterTriodion"

var _BookIndex = [...]uint8{0, 7, 18, 30, 40, 50, 61, 68, 79, 84, 98, 105, 113}

func (i Book) String() string {
	if i < 0 || i >= Book(len(_BookIndex)-1) {
		return fmt.Sprintf("Book(%d)", i)
	}
	return _BookName[_BookIndex[i]:_BookIndex[i+1]]
}

var _BookValues = []Book{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

var _BookNameToValueMap = map[string]Book{
	_BookName[0:7]:     0,
	_BookName[7:18]:    1,
	_BookName[18:30]:   2,
	_BookName[30:40]:   3,
	_BookName[40:50]:   4,
	_BookName[50:61]:   5,
	_BookName[61:68]:   6,
	_BookName[68:79]:   7,
	_BookName[79:84]:   8,
	_BookName[84:98]:   9,
	_BookName[98:105]:  10,
	_BookName[105:113]: 11,
}

// BookString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BookString(s string) (Book, error) {
	if val, ok := _BookNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Book values", s)
}

// BookValues returns all values of the enum
func BookValues() []Book {
	return _BookValues
}

// IsABook returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Book) IsABook() bool {
	for _, v := range _BookValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Book
func (i Book) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Book
func (i *Book) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Book should be a string, got %s", data)
	}

	var err error
	*i, err = BookString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Book
func (i Book) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Book
func (i *Book) UnmarshalText(text []byte) error {
	var err error
	*i, err = BookString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Book
func (i Book) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Book
func (i *Book) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = BookString(s)
	return err
}

func (i Book) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Book) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := BookString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
