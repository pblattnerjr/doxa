// Code generated by "enumer -type=TemplateType -json -text -yaml -sql"; DO NOT EDIT.

//
package templateTypes

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _TemplateTypeName = "BlockBookService"

var _TemplateTypeIndex = [...]uint8{0, 5, 9, 16}

func (i TemplateType) String() string {
	if i < 0 || i >= TemplateType(len(_TemplateTypeIndex)-1) {
		return fmt.Sprintf("TemplateType(%d)", i)
	}
	return _TemplateTypeName[_TemplateTypeIndex[i]:_TemplateTypeIndex[i+1]]
}

var _TemplateTypeValues = []TemplateType{0, 1, 2}

var _TemplateTypeNameToValueMap = map[string]TemplateType{
	_TemplateTypeName[0:5]:  0,
	_TemplateTypeName[5:9]:  1,
	_TemplateTypeName[9:16]: 2,
}

// TemplateTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TemplateTypeString(s string) (TemplateType, error) {
	if val, ok := _TemplateTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TemplateType values", s)
}

// TemplateTypeValues returns all values of the enum
func TemplateTypeValues() []TemplateType {
	return _TemplateTypeValues
}

// IsATemplateType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TemplateType) IsATemplateType() bool {
	for _, v := range _TemplateTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TemplateType
func (i TemplateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TemplateType
func (i *TemplateType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TemplateType should be a string, got %s", data)
	}

	var err error
	*i, err = TemplateTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for TemplateType
func (i TemplateType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TemplateType
func (i *TemplateType) UnmarshalText(text []byte) error {
	var err error
	*i, err = TemplateTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for TemplateType
func (i TemplateType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TemplateType
func (i *TemplateType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TemplateTypeString(s)
	return err
}

func (i TemplateType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *TemplateType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := TemplateTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
