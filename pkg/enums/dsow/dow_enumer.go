// Code generated by "enumer -type=DOW -json -text -yaml -sql"; DO NOT EDIT.

//
package dsow

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _DOWName = "D1D2D3D4D5D6D7"

var _DOWIndex = [...]uint8{0, 2, 4, 6, 8, 10, 12, 14}

func (i DOW) String() string {
	i -= 1
	if i < 0 || i >= DOW(len(_DOWIndex)-1) {
		return fmt.Sprintf("DOW(%d)", i+1)
	}
	return _DOWName[_DOWIndex[i]:_DOWIndex[i+1]]
}

var _DOWValues = []DOW{1, 2, 3, 4, 5, 6, 7}

var _DOWNameToValueMap = map[string]DOW{
	_DOWName[0:2]:   1,
	_DOWName[2:4]:   2,
	_DOWName[4:6]:   3,
	_DOWName[6:8]:   4,
	_DOWName[8:10]:  5,
	_DOWName[10:12]: 6,
	_DOWName[12:14]: 7,
}

// DOWString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DOWString(s string) (DOW, error) {
	if val, ok := _DOWNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DOW values", s)
}

// DOWValues returns all values of the enum
func DOWValues() []DOW {
	return _DOWValues
}

// IsADOW returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DOW) IsADOW() bool {
	for _, v := range _DOWValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DOW
func (i DOW) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DOW
func (i *DOW) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DOW should be a string, got %s", data)
	}

	var err error
	*i, err = DOWString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for DOW
func (i DOW) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DOW
func (i *DOW) UnmarshalText(text []byte) error {
	var err error
	*i, err = DOWString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for DOW
func (i DOW) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DOW
func (i *DOW) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DOWString(s)
	return err
}

func (i DOW) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DOW) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := DOWString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
