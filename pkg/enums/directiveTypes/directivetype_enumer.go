// Code generated by "enumer -type=DirectiveType -json -text -yaml -sql"; DO NOT EDIT.

//
package directiveTypes

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _DirectiveTypeName = "InsertDateInsertLiteralInsertLookupInsertPageNbrInsertVersion"

var _DirectiveTypeIndex = [...]uint8{0, 10, 23, 35, 48, 61}

func (i DirectiveType) String() string {
	if i < 0 || i >= DirectiveType(len(_DirectiveTypeIndex)-1) {
		return fmt.Sprintf("DirectiveType(%d)", i)
	}
	return _DirectiveTypeName[_DirectiveTypeIndex[i]:_DirectiveTypeIndex[i+1]]
}

var _DirectiveTypeValues = []DirectiveType{0, 1, 2, 3, 4}

var _DirectiveTypeNameToValueMap = map[string]DirectiveType{
	_DirectiveTypeName[0:10]:  0,
	_DirectiveTypeName[10:23]: 1,
	_DirectiveTypeName[23:35]: 2,
	_DirectiveTypeName[35:48]: 3,
	_DirectiveTypeName[48:61]: 4,
}

// DirectiveTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DirectiveTypeString(s string) (DirectiveType, error) {
	if val, ok := _DirectiveTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DirectiveType values", s)
}

// DirectiveTypeValues returns all values of the enum
func DirectiveTypeValues() []DirectiveType {
	return _DirectiveTypeValues
}

// IsADirectiveType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DirectiveType) IsADirectiveType() bool {
	for _, v := range _DirectiveTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DirectiveType
func (i DirectiveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DirectiveType
func (i *DirectiveType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DirectiveType should be a string, got %s", data)
	}

	var err error
	*i, err = DirectiveTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for DirectiveType
func (i DirectiveType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DirectiveType
func (i *DirectiveType) UnmarshalText(text []byte) error {
	var err error
	*i, err = DirectiveTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for DirectiveType
func (i DirectiveType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DirectiveType
func (i *DirectiveType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DirectiveTypeString(s)
	return err
}

func (i DirectiveType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DirectiveType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := DirectiveTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
