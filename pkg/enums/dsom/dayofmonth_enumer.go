// Code generated by "enumer -type=DayOfMonth -json -text -yaml -sql"; DO NOT EDIT.

//
package dsom

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _DayOfMonthName = "D01D02D03D04D05D06D07D08D09D10D11D12D13D14D15D16D17D18D19D20D21D22D23D24D25D26D27D28D29D30D31"

var _DayOfMonthIndex = [...]uint8{0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93}

func (i DayOfMonth) String() string {
	i -= 1
	if i < 0 || i >= DayOfMonth(len(_DayOfMonthIndex)-1) {
		return fmt.Sprintf("DayOfMonth(%d)", i+1)
	}
	return _DayOfMonthName[_DayOfMonthIndex[i]:_DayOfMonthIndex[i+1]]
}

var _DayOfMonthValues = []DayOfMonth{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}

var _DayOfMonthNameToValueMap = map[string]DayOfMonth{
	_DayOfMonthName[0:3]:   1,
	_DayOfMonthName[3:6]:   2,
	_DayOfMonthName[6:9]:   3,
	_DayOfMonthName[9:12]:  4,
	_DayOfMonthName[12:15]: 5,
	_DayOfMonthName[15:18]: 6,
	_DayOfMonthName[18:21]: 7,
	_DayOfMonthName[21:24]: 8,
	_DayOfMonthName[24:27]: 9,
	_DayOfMonthName[27:30]: 10,
	_DayOfMonthName[30:33]: 11,
	_DayOfMonthName[33:36]: 12,
	_DayOfMonthName[36:39]: 13,
	_DayOfMonthName[39:42]: 14,
	_DayOfMonthName[42:45]: 15,
	_DayOfMonthName[45:48]: 16,
	_DayOfMonthName[48:51]: 17,
	_DayOfMonthName[51:54]: 18,
	_DayOfMonthName[54:57]: 19,
	_DayOfMonthName[57:60]: 20,
	_DayOfMonthName[60:63]: 21,
	_DayOfMonthName[63:66]: 22,
	_DayOfMonthName[66:69]: 23,
	_DayOfMonthName[69:72]: 24,
	_DayOfMonthName[72:75]: 25,
	_DayOfMonthName[75:78]: 26,
	_DayOfMonthName[78:81]: 27,
	_DayOfMonthName[81:84]: 28,
	_DayOfMonthName[84:87]: 29,
	_DayOfMonthName[87:90]: 30,
	_DayOfMonthName[90:93]: 31,
}

// DayOfMonthString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DayOfMonthString(s string) (DayOfMonth, error) {
	if val, ok := _DayOfMonthNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DayOfMonth values", s)
}

// DayOfMonthValues returns all values of the enum
func DayOfMonthValues() []DayOfMonth {
	return _DayOfMonthValues
}

// IsADayOfMonth returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DayOfMonth) IsADayOfMonth() bool {
	for _, v := range _DayOfMonthValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DayOfMonth
func (i DayOfMonth) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DayOfMonth
func (i *DayOfMonth) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DayOfMonth should be a string, got %s", data)
	}

	var err error
	*i, err = DayOfMonthString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for DayOfMonth
func (i DayOfMonth) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DayOfMonth
func (i *DayOfMonth) UnmarshalText(text []byte) error {
	var err error
	*i, err = DayOfMonthString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for DayOfMonth
func (i DayOfMonth) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DayOfMonth
func (i *DayOfMonth) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DayOfMonthString(s)
	return err
}

func (i DayOfMonth) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DayOfMonth) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := DayOfMonthString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
