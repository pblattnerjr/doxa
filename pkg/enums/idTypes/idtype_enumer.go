// Code generated by "enumer -type=IDType -json -text -yaml -sql"; DO NOT EDIT.

//
package idTypes

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _IDTypeName = "NIDRIDSID"

var _IDTypeIndex = [...]uint8{0, 3, 6, 9}

func (i IDType) String() string {
	if i < 0 || i >= IDType(len(_IDTypeIndex)-1) {
		return fmt.Sprintf("IDType(%d)", i)
	}
	return _IDTypeName[_IDTypeIndex[i]:_IDTypeIndex[i+1]]
}

var _IDTypeValues = []IDType{0, 1, 2}

var _IDTypeNameToValueMap = map[string]IDType{
	_IDTypeName[0:3]: 0,
	_IDTypeName[3:6]: 1,
	_IDTypeName[6:9]: 2,
}

// IDTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IDTypeString(s string) (IDType, error) {
	if val, ok := _IDTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IDType values", s)
}

// IDTypeValues returns all values of the enum
func IDTypeValues() []IDType {
	return _IDTypeValues
}

// IsAIDType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IDType) IsAIDType() bool {
	for _, v := range _IDTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for IDType
func (i IDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for IDType
func (i *IDType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IDType should be a string, got %s", data)
	}

	var err error
	*i, err = IDTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for IDType
func (i IDType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for IDType
func (i *IDType) UnmarshalText(text []byte) error {
	var err error
	*i, err = IDTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for IDType
func (i IDType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for IDType
func (i *IDType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = IDTypeString(s)
	return err
}

func (i IDType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *IDType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := IDTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
